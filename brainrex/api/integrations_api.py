# coding: utf-8

"""
    Brainrex General Sentiment API

    Runs the price sentiment service of api.brainrex.com/sentiment/  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from brainrex.api_client import ApiClient


class IntegrationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def crypto_get_candle_data(self, text, **kwargs):  # noqa: E501
        """Downloads candle format market data  # noqa: E501

        Returns a list of candle data from specified market and data range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crypto_get_candle_data(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Text text: Exchange, trading pair and date rage for data (required)
        :return: CandleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crypto_get_candle_data_with_http_info(text, **kwargs)  # noqa: E501
        else:
            (data) = self.crypto_get_candle_data_with_http_info(text, **kwargs)  # noqa: E501
            return data

    def crypto_get_candle_data_with_http_info(self, text, **kwargs):  # noqa: E501
        """Downloads candle format market data  # noqa: E501

        Returns a list of candle data from specified market and data range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crypto_get_candle_data_with_http_info(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Text text: Exchange, trading pair and date rage for data (required)
        :return: CandleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['text']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crypto_get_candle_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'text' is set
        if ('text' not in params or
                params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `crypto_get_candle_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'text' in params:
            body_params = params['text']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/crypto/get_candles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CandleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crypto_get_exchange_assets(self, exchange_name, **kwargs):  # noqa: E501
        """Gets all currency pairs traded in selected exchange  # noqa: E501

        Returns a list of candle data from specified market and data range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crypto_get_exchange_assets(exchange_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExchangeName exchange_name: Name of the cryptocurrency exchange (required)
        :return: OHCLV
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crypto_get_exchange_assets_with_http_info(exchange_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crypto_get_exchange_assets_with_http_info(exchange_name, **kwargs)  # noqa: E501
            return data

    def crypto_get_exchange_assets_with_http_info(self, exchange_name, **kwargs):  # noqa: E501
        """Gets all currency pairs traded in selected exchange  # noqa: E501

        Returns a list of candle data from specified market and data range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crypto_get_exchange_assets_with_http_info(exchange_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExchangeName exchange_name: Name of the cryptocurrency exchange (required)
        :return: OHCLV
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exchange_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crypto_get_exchange_assets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exchange_name' is set
        if ('exchange_name' not in params or
                params['exchange_name'] is None):
            raise ValueError("Missing the required parameter `exchange_name` when calling `crypto_get_exchange_assets`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'exchange_name' in params:
            body_params = params['exchange_name']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/crypto/get_exchange_assets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OHCLV',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crypto_get_orderbooks(self, text, **kwargs):  # noqa: E501
        """Downloads candle format market data  # noqa: E501

        Returns a list of candle data from specified market and data range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crypto_get_orderbooks(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Text1 text: Exchange, trading pair and date rage for data (required)
        :return: OHCLV
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crypto_get_orderbooks_with_http_info(text, **kwargs)  # noqa: E501
        else:
            (data) = self.crypto_get_orderbooks_with_http_info(text, **kwargs)  # noqa: E501
            return data

    def crypto_get_orderbooks_with_http_info(self, text, **kwargs):  # noqa: E501
        """Downloads candle format market data  # noqa: E501

        Returns a list of candle data from specified market and data range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crypto_get_orderbooks_with_http_info(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Text1 text: Exchange, trading pair and date rage for data (required)
        :return: OHCLV
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['text']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crypto_get_orderbooks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'text' is set
        if ('text' not in params or
                params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `crypto_get_orderbooks`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'text' in params:
            body_params = params['text']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/crypto/get_orderbooks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OHCLV',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crypto_get_supported_exchanges(self, **kwargs):  # noqa: E501
        """Gets all cryptocurrency exchanges supported by the Brainrex API  # noqa: E501

        Returns a list of candle data from specified market and data range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crypto_get_supported_exchanges(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crypto_get_supported_exchanges_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.crypto_get_supported_exchanges_with_http_info(**kwargs)  # noqa: E501
            return data

    def crypto_get_supported_exchanges_with_http_info(self, **kwargs):  # noqa: E501
        """Gets all cryptocurrency exchanges supported by the Brainrex API  # noqa: E501

        Returns a list of candle data from specified market and data range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crypto_get_supported_exchanges_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crypto_get_supported_exchanges" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/crypto/get_supported_exchanges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crypto_get_ticker(self, text, **kwargs):  # noqa: E501
        """Downloads candle format market data  # noqa: E501

        Returns a list of candle data from specified market and data range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crypto_get_ticker(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Text2 text: Get ticker data from specified crypto exchange (required)
        :return: OHCLV
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.crypto_get_ticker_with_http_info(text, **kwargs)  # noqa: E501
        else:
            (data) = self.crypto_get_ticker_with_http_info(text, **kwargs)  # noqa: E501
            return data

    def crypto_get_ticker_with_http_info(self, text, **kwargs):  # noqa: E501
        """Downloads candle format market data  # noqa: E501

        Returns a list of candle data from specified market and data range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.crypto_get_ticker_with_http_info(text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Text2 text: Get ticker data from specified crypto exchange (required)
        :return: OHCLV
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['text']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crypto_get_ticker" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'text' is set
        if ('text' not in params or
                params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `crypto_get_ticker`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'text' in params:
            body_params = params['text']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/crypto/get_ticker', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OHCLV',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
